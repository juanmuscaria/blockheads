// Generated by jextract

package com.juanmuscaria.foreign.enet;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;

/**
 * {@snippet :
 * struct _ENetProtocolThrottleConfigure {
 *     ENetProtocolCommandHeader header;
 *     enet_uint32 packetThrottleInterval;
 *     enet_uint32 packetThrottleAcceleration;
 *     enet_uint32 packetThrottleDeceleration;
 * };
 * }
 */
public class _ENetProtocolThrottleConfigure {

    public static MemoryLayout $LAYOUT() {
      return constants$6.const$4;
    }
    public static MemorySegment header$slice(MemorySegment seg) {
        return seg.asSlice(0, 4);
    }
    public static VarHandle packetThrottleInterval$VH() {
      return constants$6.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint32 packetThrottleInterval;
     * }
     */
    public static int packetThrottleInterval$get(MemorySegment seg) {
      return (int) constants$6.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint32 packetThrottleInterval;
     * }
     */
    public static void packetThrottleInterval$set(MemorySegment seg, int x) {
      constants$6.const$5.set(seg, x);
    }
    public static int packetThrottleInterval$get(MemorySegment seg, long index) {
      return (int) constants$6.const$5.get(seg.asSlice(index * sizeof()));
    }
    public static void packetThrottleInterval$set(MemorySegment seg, long index, int x) {
      constants$6.const$5.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle packetThrottleAcceleration$VH() {
      return constants$7.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint32 packetThrottleAcceleration;
     * }
     */
    public static int packetThrottleAcceleration$get(MemorySegment seg) {
      return (int) constants$7.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint32 packetThrottleAcceleration;
     * }
     */
    public static void packetThrottleAcceleration$set(MemorySegment seg, int x) {
      constants$7.const$0.set(seg, x);
    }
    public static int packetThrottleAcceleration$get(MemorySegment seg, long index) {
      return (int) constants$7.const$0.get(seg.asSlice(index * sizeof()));
    }
    public static void packetThrottleAcceleration$set(MemorySegment seg, long index, int x) {
      constants$7.const$0.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle packetThrottleDeceleration$VH() {
      return constants$7.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint32 packetThrottleDeceleration;
     * }
     */
    public static int packetThrottleDeceleration$get(MemorySegment seg) {
      return (int) constants$7.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint32 packetThrottleDeceleration;
     * }
     */
    public static void packetThrottleDeceleration$set(MemorySegment seg, int x) {
      constants$7.const$1.set(seg, x);
    }
    public static int packetThrottleDeceleration$get(MemorySegment seg, long index) {
      return (int) constants$7.const$1.get(seg.asSlice(index * sizeof()));
    }
    public static void packetThrottleDeceleration$set(MemorySegment seg, long index, int x) {
      constants$7.const$1.set(seg.asSlice(index * sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


