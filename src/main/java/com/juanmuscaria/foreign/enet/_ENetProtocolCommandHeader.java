// Generated by jextract

package com.juanmuscaria.foreign.enet;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;

/**
 * {@snippet :
 * struct _ENetProtocolCommandHeader {
 *     enet_uint8 command;
 *     enet_uint8 channelID;
 *     enet_uint16 reliableSequenceNumber;
 * };
 * }
 */
public class _ENetProtocolCommandHeader {

    public static MemoryLayout $LAYOUT() {
      return constants$0.const$3;
    }
    public static VarHandle command$VH() {
      return constants$0.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint8 command;
     * }
     */
    public static byte command$get(MemorySegment seg) {
      return (byte) constants$0.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint8 command;
     * }
     */
    public static void command$set(MemorySegment seg, byte x) {
      constants$0.const$4.set(seg, x);
    }
    public static byte command$get(MemorySegment seg, long index) {
      return (byte) constants$0.const$4.get(seg.asSlice(index * sizeof()));
    }
    public static void command$set(MemorySegment seg, long index, byte x) {
      constants$0.const$4.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle channelID$VH() {
      return constants$0.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint8 channelID;
     * }
     */
    public static byte channelID$get(MemorySegment seg) {
      return (byte) constants$0.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint8 channelID;
     * }
     */
    public static void channelID$set(MemorySegment seg, byte x) {
      constants$0.const$5.set(seg, x);
    }
    public static byte channelID$get(MemorySegment seg, long index) {
      return (byte) constants$0.const$5.get(seg.asSlice(index * sizeof()));
    }
    public static void channelID$set(MemorySegment seg, long index, byte x) {
      constants$0.const$5.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle reliableSequenceNumber$VH() {
      return constants$1.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint16 reliableSequenceNumber;
     * }
     */
    public static short reliableSequenceNumber$get(MemorySegment seg) {
      return (short) constants$1.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint16 reliableSequenceNumber;
     * }
     */
    public static void reliableSequenceNumber$set(MemorySegment seg, short x) {
      constants$1.const$0.set(seg, x);
    }
    public static short reliableSequenceNumber$get(MemorySegment seg, long index) {
      return (short) constants$1.const$0.get(seg.asSlice(index * sizeof()));
    }
    public static void reliableSequenceNumber$set(MemorySegment seg, long index, short x) {
      constants$1.const$0.set(seg.asSlice(index * sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


