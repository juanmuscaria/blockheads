// Generated by jextract

package com.juanmuscaria.foreign.enet;

import java.lang.invoke.VarHandle;
import java.lang.foreign.*;

/**
 * {@snippet :
 * struct _ENetAddress {
 *     enet_uint32 host;
 *     enet_uint16 port;
 * };
 * }
 */
public class _ENetAddress {

    public static MemoryLayout $LAYOUT() {
        return constants$15.const$0;
    }
    public static VarHandle host$VH() {
        return constants$15.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint32 host;
     * }
     */
    public static int host$get(MemorySegment seg) {
        return (int) constants$15.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint32 host;
     * }
     */
    public static void host$set(MemorySegment seg, int x) {
        constants$15.const$1.set(seg, x);
    }
    public static int host$get(MemorySegment seg, long index) {
        return (int) constants$15.const$1.get(seg.asSlice(index * sizeof()));
    }
    public static void host$set(MemorySegment seg, long index, int x) {
        constants$15.const$1.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle port$VH() {
        return constants$15.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint16 port;
     * }
     */
    public static short port$get(MemorySegment seg) {
        return (short) constants$15.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint16 port;
     * }
     */
    public static void port$set(MemorySegment seg, short x) {
        constants$15.const$2.set(seg, x);
    }
    public static short port$get(MemorySegment seg, long index) {
        return (short) constants$15.const$2.get(seg.asSlice(index * sizeof()));
    }
    public static void port$set(MemorySegment seg, long index, short x) {
        constants$15.const$2.set(seg.asSlice(index * sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


