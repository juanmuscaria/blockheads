// Generated by jextract

package com.juanmuscaria.foreign.enet;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;

/**
 * {@snippet :
 * struct _ENetPacket {
 *     size_t referenceCount;
 *     enet_uint32 flags;
 *     enet_uint8* data;
 *     size_t dataLength;
 *     ENetPacketFreeCallback freeCallback;
 *     void* userData;
 * };
 * }
 */
public class _ENetPacket {

    public static MemoryLayout $LAYOUT() {
        return constants$15.const$4;
    }
    public static VarHandle referenceCount$VH() {
        return constants$15.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * size_t referenceCount;
     * }
     */
    public static long referenceCount$get(MemorySegment seg) {
        return (long) constants$15.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * size_t referenceCount;
     * }
     */
    public static void referenceCount$set(MemorySegment seg, long x) {
        constants$15.const$5.set(seg, x);
    }
    public static long referenceCount$get(MemorySegment seg, long index) {
        return (long) constants$15.const$5.get(seg.asSlice(index * sizeof()));
    }
    public static void referenceCount$set(MemorySegment seg, long index, long x) {
        constants$15.const$5.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle flags$VH() {
        return constants$16.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint32 flags;
     * }
     */
    public static int flags$get(MemorySegment seg) {
        return (int) constants$16.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint32 flags;
     * }
     */
    public static void flags$set(MemorySegment seg, int x) {
        constants$16.const$0.set(seg, x);
    }
    public static int flags$get(MemorySegment seg, long index) {
        return (int) constants$16.const$0.get(seg.asSlice(index * sizeof()));
    }
    public static void flags$set(MemorySegment seg, long index, int x) {
        constants$16.const$0.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle data$VH() {
        return constants$16.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint8* data;
     * }
     */
    public static MemorySegment data$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment) constants$16.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint8* data;
     * }
     */
    public static void data$set(MemorySegment seg, MemorySegment x) {
        constants$16.const$1.set(seg, x);
    }
    public static MemorySegment data$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment) constants$16.const$1.get(seg.asSlice(index * sizeof()));
    }
    public static void data$set(MemorySegment seg, long index, MemorySegment x) {
        constants$16.const$1.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle dataLength$VH() {
        return constants$16.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * size_t dataLength;
     * }
     */
    public static long dataLength$get(MemorySegment seg) {
        return (long) constants$16.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * size_t dataLength;
     * }
     */
    public static void dataLength$set(MemorySegment seg, long x) {
        constants$16.const$2.set(seg, x);
    }
    public static long dataLength$get(MemorySegment seg, long index) {
        return (long) constants$16.const$2.get(seg.asSlice(index * sizeof()));
    }
    public static void dataLength$set(MemorySegment seg, long index, long x) {
        constants$16.const$2.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle freeCallback$VH() {
        return constants$16.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ENetPacketFreeCallback freeCallback;
     * }
     */
    public static MemorySegment freeCallback$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment) constants$16.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ENetPacketFreeCallback freeCallback;
     * }
     */
    public static void freeCallback$set(MemorySegment seg, MemorySegment x) {
        constants$16.const$3.set(seg, x);
    }
    public static MemorySegment freeCallback$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment) constants$16.const$3.get(seg.asSlice(index * sizeof()));
    }
    public static void freeCallback$set(MemorySegment seg, long index, MemorySegment x) {
        constants$16.const$3.set(seg.asSlice(index * sizeof()), x);
    }
    public static ENetPacketFreeCallback freeCallback(MemorySegment segment, Arena scope) {
        return ENetPacketFreeCallback.ofAddress(freeCallback$get(segment), scope);
    }
    public static VarHandle userData$VH() {
        return constants$16.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* userData;
     * }
     */
    public static MemorySegment userData$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment) constants$16.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* userData;
     * }
     */
    public static void userData$set(MemorySegment seg, MemorySegment x) {
        constants$16.const$4.set(seg, x);
    }
    public static MemorySegment userData$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment) constants$16.const$4.get(seg.asSlice(index * sizeof()));
    }
    public static void userData$set(MemorySegment seg, long index, MemorySegment x) {
        constants$16.const$4.set(seg.asSlice(index * sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


