// Generated by jextract

package com.juanmuscaria.foreign.enet;

import java.lang.invoke.VarHandle;
import java.lang.foreign.*;

/**
 * {@snippet :
 * struct _ENetCallbacks {
 *     void* (*malloc)(size_t);
 *     void (*free)(void*);
 *     void (*no_memory)();
 * };
 * }
 */
public class _ENetCallbacks {

    public static MemoryLayout $LAYOUT() {
      return constants$12.const$4;
    }
    /**
     * {@snippet :
 * void* (*malloc)(size_t);
     * }
     */
    public interface malloc {

        java.lang.foreign.MemorySegment apply(long _x0);
        static MemorySegment allocate(malloc fi, Arena scope) {
          return RuntimeHelper.upcallStub(constants$13.const$0, fi, constants$12.const$5, scope);
        }
        static malloc ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (long __x0) -> {
                try {
                  return (java.lang.foreign.MemorySegment) constants$13.const$1.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle malloc$VH() {
      return constants$13.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* (*malloc)(size_t);
     * }
     */
    public static MemorySegment malloc$get(MemorySegment seg) {
      return (java.lang.foreign.MemorySegment) constants$13.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* (*malloc)(size_t);
     * }
     */
    public static void malloc$set(MemorySegment seg, MemorySegment x) {
      constants$13.const$2.set(seg, x);
    }
    public static MemorySegment malloc$get(MemorySegment seg, long index) {
      return (java.lang.foreign.MemorySegment) constants$13.const$2.get(seg.asSlice(index * sizeof()));
    }
    public static void malloc$set(MemorySegment seg, long index, MemorySegment x) {
      constants$13.const$2.set(seg.asSlice(index * sizeof()), x);
    }
    public static malloc malloc(MemorySegment segment, Arena scope) {
        return malloc.ofAddress(malloc$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*free)(void*);
     * }
     */
    public interface free {

        void apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(free fi, Arena scope) {
          return RuntimeHelper.upcallStub(constants$13.const$3, fi, constants$11.const$1, scope);
        }
        static free ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                  constants$13.const$4.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle free$VH() {
      return constants$13.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*free)(void*);
     * }
     */
    public static MemorySegment free$get(MemorySegment seg) {
      return (java.lang.foreign.MemorySegment) constants$13.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*free)(void*);
     * }
     */
    public static void free$set(MemorySegment seg, MemorySegment x) {
      constants$13.const$5.set(seg, x);
    }
    public static MemorySegment free$get(MemorySegment seg, long index) {
      return (java.lang.foreign.MemorySegment) constants$13.const$5.get(seg.asSlice(index * sizeof()));
    }
    public static void free$set(MemorySegment seg, long index, MemorySegment x) {
      constants$13.const$5.set(seg.asSlice(index * sizeof()), x);
    }
    public static free free(MemorySegment segment, Arena scope) {
        return free.ofAddress(free$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*no_memory)();
     * }
     */
    public interface no_memory {

        void apply();
        static MemorySegment allocate(no_memory fi, Arena scope) {
          return RuntimeHelper.upcallStub(constants$14.const$1, fi, constants$14.const$0, scope);
        }
        static no_memory ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                  constants$14.const$2.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle no_memory$VH() {
      return constants$14.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*no_memory)();
     * }
     */
    public static MemorySegment no_memory$get(MemorySegment seg) {
      return (java.lang.foreign.MemorySegment) constants$14.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*no_memory)();
     * }
     */
    public static void no_memory$set(MemorySegment seg, MemorySegment x) {
      constants$14.const$3.set(seg, x);
    }
    public static MemorySegment no_memory$get(MemorySegment seg, long index) {
      return (java.lang.foreign.MemorySegment) constants$14.const$3.get(seg.asSlice(index * sizeof()));
    }
    public static void no_memory$set(MemorySegment seg, long index, MemorySegment x) {
      constants$14.const$3.set(seg.asSlice(index * sizeof()), x);
    }
    public static no_memory no_memory(MemorySegment segment, Arena scope) {
        return no_memory.ofAddress(no_memory$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


