// Generated by jextract

package com.juanmuscaria.foreign.enet;

import java.lang.invoke.VarHandle;
import java.lang.foreign.*;

/**
 * {@snippet :
 * struct _ENetChannel {
 *     enet_uint16 outgoingReliableSequenceNumber;
 *     enet_uint16 outgoingUnreliableSequenceNumber;
 *     enet_uint16 usedReliableWindows;
 *     enet_uint16 reliableWindows[16];
 *     enet_uint16 incomingReliableSequenceNumber;
 *     enet_uint16 incomingUnreliableSequenceNumber;
 *     ENetList incomingReliableCommands;
 *     ENetList incomingUnreliableCommands;
 * };
 * }
 */
public class _ENetChannel {

    public static MemoryLayout $LAYOUT() {
      return constants$20.const$0;
    }
    public static VarHandle outgoingReliableSequenceNumber$VH() {
      return constants$20.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint16 outgoingReliableSequenceNumber;
     * }
     */
    public static short outgoingReliableSequenceNumber$get(MemorySegment seg) {
      return (short) constants$20.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint16 outgoingReliableSequenceNumber;
     * }
     */
    public static void outgoingReliableSequenceNumber$set(MemorySegment seg, short x) {
      constants$20.const$1.set(seg, x);
    }
    public static short outgoingReliableSequenceNumber$get(MemorySegment seg, long index) {
      return (short) constants$20.const$1.get(seg.asSlice(index * sizeof()));
    }
    public static void outgoingReliableSequenceNumber$set(MemorySegment seg, long index, short x) {
      constants$20.const$1.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle outgoingUnreliableSequenceNumber$VH() {
      return constants$20.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint16 outgoingUnreliableSequenceNumber;
     * }
     */
    public static short outgoingUnreliableSequenceNumber$get(MemorySegment seg) {
      return (short) constants$20.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint16 outgoingUnreliableSequenceNumber;
     * }
     */
    public static void outgoingUnreliableSequenceNumber$set(MemorySegment seg, short x) {
      constants$20.const$2.set(seg, x);
    }
    public static short outgoingUnreliableSequenceNumber$get(MemorySegment seg, long index) {
      return (short) constants$20.const$2.get(seg.asSlice(index * sizeof()));
    }
    public static void outgoingUnreliableSequenceNumber$set(MemorySegment seg, long index, short x) {
      constants$20.const$2.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle usedReliableWindows$VH() {
      return constants$20.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint16 usedReliableWindows;
     * }
     */
    public static short usedReliableWindows$get(MemorySegment seg) {
      return (short) constants$20.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint16 usedReliableWindows;
     * }
     */
    public static void usedReliableWindows$set(MemorySegment seg, short x) {
      constants$20.const$3.set(seg, x);
    }
    public static short usedReliableWindows$get(MemorySegment seg, long index) {
      return (short) constants$20.const$3.get(seg.asSlice(index * sizeof()));
    }
    public static void usedReliableWindows$set(MemorySegment seg, long index, short x) {
      constants$20.const$3.set(seg.asSlice(index * sizeof()), x);
    }
    public static MemorySegment reliableWindows$slice(MemorySegment seg) {
        return seg.asSlice(6, 32);
    }
    public static VarHandle incomingReliableSequenceNumber$VH() {
      return constants$20.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint16 incomingReliableSequenceNumber;
     * }
     */
    public static short incomingReliableSequenceNumber$get(MemorySegment seg) {
      return (short) constants$20.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint16 incomingReliableSequenceNumber;
     * }
     */
    public static void incomingReliableSequenceNumber$set(MemorySegment seg, short x) {
      constants$20.const$4.set(seg, x);
    }
    public static short incomingReliableSequenceNumber$get(MemorySegment seg, long index) {
      return (short) constants$20.const$4.get(seg.asSlice(index * sizeof()));
    }
    public static void incomingReliableSequenceNumber$set(MemorySegment seg, long index, short x) {
      constants$20.const$4.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle incomingUnreliableSequenceNumber$VH() {
      return constants$20.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint16 incomingUnreliableSequenceNumber;
     * }
     */
    public static short incomingUnreliableSequenceNumber$get(MemorySegment seg) {
      return (short) constants$20.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint16 incomingUnreliableSequenceNumber;
     * }
     */
    public static void incomingUnreliableSequenceNumber$set(MemorySegment seg, short x) {
      constants$20.const$5.set(seg, x);
    }
    public static short incomingUnreliableSequenceNumber$get(MemorySegment seg, long index) {
      return (short) constants$20.const$5.get(seg.asSlice(index * sizeof()));
    }
    public static void incomingUnreliableSequenceNumber$set(MemorySegment seg, long index, short x) {
      constants$20.const$5.set(seg.asSlice(index * sizeof()), x);
    }
    public static MemorySegment incomingReliableCommands$slice(MemorySegment seg) {
        return seg.asSlice(48, 16);
    }
    public static MemorySegment incomingUnreliableCommands$slice(MemorySegment seg) {
        return seg.asSlice(64, 16);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


