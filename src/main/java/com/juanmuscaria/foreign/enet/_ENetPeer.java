// Generated by jextract

package com.juanmuscaria.foreign.enet;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;

/**
 * {@snippet :
 * struct _ENetPeer {
 *     ENetListNode dispatchList;
 *     struct _ENetHost* host;
 *     enet_uint16 outgoingPeerID;
 *     enet_uint16 incomingPeerID;
 *     enet_uint32 connectID;
 *     enet_uint8 outgoingSessionID;
 *     enet_uint8 incomingSessionID;
 *     ENetAddress address;
 *     void* data;
 *     ENetPeerState state;
 *     ENetChannel* channels;
 *     size_t channelCount;
 *     enet_uint32 incomingBandwidth;
 *     enet_uint32 outgoingBandwidth;
 *     enet_uint32 incomingBandwidthThrottleEpoch;
 *     enet_uint32 outgoingBandwidthThrottleEpoch;
 *     enet_uint32 incomingDataTotal;
 *     enet_uint32 outgoingDataTotal;
 *     enet_uint32 lastSendTime;
 *     enet_uint32 lastReceiveTime;
 *     enet_uint32 nextTimeout;
 *     enet_uint32 earliestTimeout;
 *     enet_uint32 packetLossEpoch;
 *     enet_uint32 packetsSent;
 *     enet_uint32 packetsLost;
 *     enet_uint32 packetLoss;
 *     enet_uint32 packetLossVariance;
 *     enet_uint32 packetThrottle;
 *     enet_uint32 packetThrottleLimit;
 *     enet_uint32 packetThrottleCounter;
 *     enet_uint32 packetThrottleEpoch;
 *     enet_uint32 packetThrottleAcceleration;
 *     enet_uint32 packetThrottleDeceleration;
 *     enet_uint32 packetThrottleInterval;
 *     enet_uint32 pingInterval;
 *     enet_uint32 timeoutLimit;
 *     enet_uint32 timeoutMinimum;
 *     enet_uint32 timeoutMaximum;
 *     enet_uint32 lastRoundTripTime;
 *     enet_uint32 lowestRoundTripTime;
 *     enet_uint32 lastRoundTripTimeVariance;
 *     enet_uint32 highestRoundTripTimeVariance;
 *     enet_uint32 roundTripTime;
 *     enet_uint32 roundTripTimeVariance;
 *     enet_uint32 mtu;
 *     enet_uint32 windowSize;
 *     enet_uint32 reliableDataInTransit;
 *     enet_uint16 outgoingReliableSequenceNumber;
 *     ENetList acknowledgements;
 *     ENetList sentReliableCommands;
 *     ENetList sentUnreliableCommands;
 *     ENetList outgoingCommands;
 *     ENetList dispatchedCommands;
 *     enet_uint16 flags;
 *     enet_uint16 reserved;
 *     enet_uint16 incomingUnsequencedGroup;
 *     enet_uint16 outgoingUnsequencedGroup;
 *     enet_uint32 unsequencedWindow[32];
 *     enet_uint32 eventData;
 *     size_t totalWaitingData;
 * };
 * }
 */
public class _ENetPeer {

    public static MemoryLayout $LAYOUT() {
      return constants$21.const$0;
    }
    public static MemorySegment dispatchList$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    public static VarHandle host$VH() {
      return constants$21.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _ENetHost* host;
     * }
     */
    public static MemorySegment host$get(MemorySegment seg) {
      return (java.lang.foreign.MemorySegment) constants$21.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _ENetHost* host;
     * }
     */
    public static void host$set(MemorySegment seg, MemorySegment x) {
      constants$21.const$1.set(seg, x);
    }
    public static MemorySegment host$get(MemorySegment seg, long index) {
      return (java.lang.foreign.MemorySegment) constants$21.const$1.get(seg.asSlice(index * sizeof()));
    }
    public static void host$set(MemorySegment seg, long index, MemorySegment x) {
      constants$21.const$1.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle outgoingPeerID$VH() {
      return constants$21.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint16 outgoingPeerID;
     * }
     */
    public static short outgoingPeerID$get(MemorySegment seg) {
      return (short) constants$21.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint16 outgoingPeerID;
     * }
     */
    public static void outgoingPeerID$set(MemorySegment seg, short x) {
      constants$21.const$2.set(seg, x);
    }
    public static short outgoingPeerID$get(MemorySegment seg, long index) {
      return (short) constants$21.const$2.get(seg.asSlice(index * sizeof()));
    }
    public static void outgoingPeerID$set(MemorySegment seg, long index, short x) {
      constants$21.const$2.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle incomingPeerID$VH() {
      return constants$21.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint16 incomingPeerID;
     * }
     */
    public static short incomingPeerID$get(MemorySegment seg) {
      return (short) constants$21.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint16 incomingPeerID;
     * }
     */
    public static void incomingPeerID$set(MemorySegment seg, short x) {
      constants$21.const$3.set(seg, x);
    }
    public static short incomingPeerID$get(MemorySegment seg, long index) {
      return (short) constants$21.const$3.get(seg.asSlice(index * sizeof()));
    }
    public static void incomingPeerID$set(MemorySegment seg, long index, short x) {
      constants$21.const$3.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle connectID$VH() {
      return constants$21.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint32 connectID;
     * }
     */
    public static int connectID$get(MemorySegment seg) {
      return (int) constants$21.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint32 connectID;
     * }
     */
    public static void connectID$set(MemorySegment seg, int x) {
      constants$21.const$4.set(seg, x);
    }
    public static int connectID$get(MemorySegment seg, long index) {
      return (int) constants$21.const$4.get(seg.asSlice(index * sizeof()));
    }
    public static void connectID$set(MemorySegment seg, long index, int x) {
      constants$21.const$4.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle outgoingSessionID$VH() {
      return constants$21.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint8 outgoingSessionID;
     * }
     */
    public static byte outgoingSessionID$get(MemorySegment seg) {
      return (byte) constants$21.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint8 outgoingSessionID;
     * }
     */
    public static void outgoingSessionID$set(MemorySegment seg, byte x) {
      constants$21.const$5.set(seg, x);
    }
    public static byte outgoingSessionID$get(MemorySegment seg, long index) {
      return (byte) constants$21.const$5.get(seg.asSlice(index * sizeof()));
    }
    public static void outgoingSessionID$set(MemorySegment seg, long index, byte x) {
      constants$21.const$5.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle incomingSessionID$VH() {
      return constants$22.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint8 incomingSessionID;
     * }
     */
    public static byte incomingSessionID$get(MemorySegment seg) {
      return (byte) constants$22.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint8 incomingSessionID;
     * }
     */
    public static void incomingSessionID$set(MemorySegment seg, byte x) {
      constants$22.const$0.set(seg, x);
    }
    public static byte incomingSessionID$get(MemorySegment seg, long index) {
      return (byte) constants$22.const$0.get(seg.asSlice(index * sizeof()));
    }
    public static void incomingSessionID$set(MemorySegment seg, long index, byte x) {
      constants$22.const$0.set(seg.asSlice(index * sizeof()), x);
    }
    public static MemorySegment address$slice(MemorySegment seg) {
        return seg.asSlice(36, 8);
    }
    public static VarHandle data$VH() {
      return constants$22.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* data;
     * }
     */
    public static MemorySegment data$get(MemorySegment seg) {
      return (java.lang.foreign.MemorySegment) constants$22.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* data;
     * }
     */
    public static void data$set(MemorySegment seg, MemorySegment x) {
      constants$22.const$1.set(seg, x);
    }
    public static MemorySegment data$get(MemorySegment seg, long index) {
      return (java.lang.foreign.MemorySegment) constants$22.const$1.get(seg.asSlice(index * sizeof()));
    }
    public static void data$set(MemorySegment seg, long index, MemorySegment x) {
      constants$22.const$1.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle state$VH() {
      return constants$22.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ENetPeerState state;
     * }
     */
    public static int state$get(MemorySegment seg) {
      return (int) constants$22.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ENetPeerState state;
     * }
     */
    public static void state$set(MemorySegment seg, int x) {
      constants$22.const$2.set(seg, x);
    }
    public static int state$get(MemorySegment seg, long index) {
      return (int) constants$22.const$2.get(seg.asSlice(index * sizeof()));
    }
    public static void state$set(MemorySegment seg, long index, int x) {
      constants$22.const$2.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle channels$VH() {
      return constants$22.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ENetChannel* channels;
     * }
     */
    public static MemorySegment channels$get(MemorySegment seg) {
      return (java.lang.foreign.MemorySegment) constants$22.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ENetChannel* channels;
     * }
     */
    public static void channels$set(MemorySegment seg, MemorySegment x) {
      constants$22.const$3.set(seg, x);
    }
    public static MemorySegment channels$get(MemorySegment seg, long index) {
      return (java.lang.foreign.MemorySegment) constants$22.const$3.get(seg.asSlice(index * sizeof()));
    }
    public static void channels$set(MemorySegment seg, long index, MemorySegment x) {
      constants$22.const$3.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle channelCount$VH() {
      return constants$22.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * size_t channelCount;
     * }
     */
    public static long channelCount$get(MemorySegment seg) {
      return (long) constants$22.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * size_t channelCount;
     * }
     */
    public static void channelCount$set(MemorySegment seg, long x) {
      constants$22.const$4.set(seg, x);
    }
    public static long channelCount$get(MemorySegment seg, long index) {
      return (long) constants$22.const$4.get(seg.asSlice(index * sizeof()));
    }
    public static void channelCount$set(MemorySegment seg, long index, long x) {
      constants$22.const$4.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle incomingBandwidth$VH() {
      return constants$22.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint32 incomingBandwidth;
     * }
     */
    public static int incomingBandwidth$get(MemorySegment seg) {
      return (int) constants$22.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint32 incomingBandwidth;
     * }
     */
    public static void incomingBandwidth$set(MemorySegment seg, int x) {
      constants$22.const$5.set(seg, x);
    }
    public static int incomingBandwidth$get(MemorySegment seg, long index) {
      return (int) constants$22.const$5.get(seg.asSlice(index * sizeof()));
    }
    public static void incomingBandwidth$set(MemorySegment seg, long index, int x) {
      constants$22.const$5.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle outgoingBandwidth$VH() {
      return constants$23.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint32 outgoingBandwidth;
     * }
     */
    public static int outgoingBandwidth$get(MemorySegment seg) {
      return (int) constants$23.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint32 outgoingBandwidth;
     * }
     */
    public static void outgoingBandwidth$set(MemorySegment seg, int x) {
      constants$23.const$0.set(seg, x);
    }
    public static int outgoingBandwidth$get(MemorySegment seg, long index) {
      return (int) constants$23.const$0.get(seg.asSlice(index * sizeof()));
    }
    public static void outgoingBandwidth$set(MemorySegment seg, long index, int x) {
      constants$23.const$0.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle incomingBandwidthThrottleEpoch$VH() {
      return constants$23.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint32 incomingBandwidthThrottleEpoch;
     * }
     */
    public static int incomingBandwidthThrottleEpoch$get(MemorySegment seg) {
      return (int) constants$23.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint32 incomingBandwidthThrottleEpoch;
     * }
     */
    public static void incomingBandwidthThrottleEpoch$set(MemorySegment seg, int x) {
      constants$23.const$1.set(seg, x);
    }
    public static int incomingBandwidthThrottleEpoch$get(MemorySegment seg, long index) {
      return (int) constants$23.const$1.get(seg.asSlice(index * sizeof()));
    }
    public static void incomingBandwidthThrottleEpoch$set(MemorySegment seg, long index, int x) {
      constants$23.const$1.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle outgoingBandwidthThrottleEpoch$VH() {
      return constants$23.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint32 outgoingBandwidthThrottleEpoch;
     * }
     */
    public static int outgoingBandwidthThrottleEpoch$get(MemorySegment seg) {
      return (int) constants$23.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint32 outgoingBandwidthThrottleEpoch;
     * }
     */
    public static void outgoingBandwidthThrottleEpoch$set(MemorySegment seg, int x) {
      constants$23.const$2.set(seg, x);
    }
    public static int outgoingBandwidthThrottleEpoch$get(MemorySegment seg, long index) {
      return (int) constants$23.const$2.get(seg.asSlice(index * sizeof()));
    }
    public static void outgoingBandwidthThrottleEpoch$set(MemorySegment seg, long index, int x) {
      constants$23.const$2.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle incomingDataTotal$VH() {
      return constants$23.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint32 incomingDataTotal;
     * }
     */
    public static int incomingDataTotal$get(MemorySegment seg) {
      return (int) constants$23.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint32 incomingDataTotal;
     * }
     */
    public static void incomingDataTotal$set(MemorySegment seg, int x) {
      constants$23.const$3.set(seg, x);
    }
    public static int incomingDataTotal$get(MemorySegment seg, long index) {
      return (int) constants$23.const$3.get(seg.asSlice(index * sizeof()));
    }
    public static void incomingDataTotal$set(MemorySegment seg, long index, int x) {
      constants$23.const$3.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle outgoingDataTotal$VH() {
      return constants$23.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint32 outgoingDataTotal;
     * }
     */
    public static int outgoingDataTotal$get(MemorySegment seg) {
      return (int) constants$23.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint32 outgoingDataTotal;
     * }
     */
    public static void outgoingDataTotal$set(MemorySegment seg, int x) {
      constants$23.const$4.set(seg, x);
    }
    public static int outgoingDataTotal$get(MemorySegment seg, long index) {
      return (int) constants$23.const$4.get(seg.asSlice(index * sizeof()));
    }
    public static void outgoingDataTotal$set(MemorySegment seg, long index, int x) {
      constants$23.const$4.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle lastSendTime$VH() {
      return constants$23.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint32 lastSendTime;
     * }
     */
    public static int lastSendTime$get(MemorySegment seg) {
      return (int) constants$23.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint32 lastSendTime;
     * }
     */
    public static void lastSendTime$set(MemorySegment seg, int x) {
      constants$23.const$5.set(seg, x);
    }
    public static int lastSendTime$get(MemorySegment seg, long index) {
      return (int) constants$23.const$5.get(seg.asSlice(index * sizeof()));
    }
    public static void lastSendTime$set(MemorySegment seg, long index, int x) {
      constants$23.const$5.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle lastReceiveTime$VH() {
      return constants$24.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint32 lastReceiveTime;
     * }
     */
    public static int lastReceiveTime$get(MemorySegment seg) {
      return (int) constants$24.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint32 lastReceiveTime;
     * }
     */
    public static void lastReceiveTime$set(MemorySegment seg, int x) {
      constants$24.const$0.set(seg, x);
    }
    public static int lastReceiveTime$get(MemorySegment seg, long index) {
      return (int) constants$24.const$0.get(seg.asSlice(index * sizeof()));
    }
    public static void lastReceiveTime$set(MemorySegment seg, long index, int x) {
      constants$24.const$0.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle nextTimeout$VH() {
      return constants$24.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint32 nextTimeout;
     * }
     */
    public static int nextTimeout$get(MemorySegment seg) {
      return (int) constants$24.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint32 nextTimeout;
     * }
     */
    public static void nextTimeout$set(MemorySegment seg, int x) {
      constants$24.const$1.set(seg, x);
    }
    public static int nextTimeout$get(MemorySegment seg, long index) {
      return (int) constants$24.const$1.get(seg.asSlice(index * sizeof()));
    }
    public static void nextTimeout$set(MemorySegment seg, long index, int x) {
      constants$24.const$1.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle earliestTimeout$VH() {
      return constants$24.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint32 earliestTimeout;
     * }
     */
    public static int earliestTimeout$get(MemorySegment seg) {
      return (int) constants$24.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint32 earliestTimeout;
     * }
     */
    public static void earliestTimeout$set(MemorySegment seg, int x) {
      constants$24.const$2.set(seg, x);
    }
    public static int earliestTimeout$get(MemorySegment seg, long index) {
      return (int) constants$24.const$2.get(seg.asSlice(index * sizeof()));
    }
    public static void earliestTimeout$set(MemorySegment seg, long index, int x) {
      constants$24.const$2.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle packetLossEpoch$VH() {
      return constants$24.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint32 packetLossEpoch;
     * }
     */
    public static int packetLossEpoch$get(MemorySegment seg) {
      return (int) constants$24.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint32 packetLossEpoch;
     * }
     */
    public static void packetLossEpoch$set(MemorySegment seg, int x) {
      constants$24.const$3.set(seg, x);
    }
    public static int packetLossEpoch$get(MemorySegment seg, long index) {
      return (int) constants$24.const$3.get(seg.asSlice(index * sizeof()));
    }
    public static void packetLossEpoch$set(MemorySegment seg, long index, int x) {
      constants$24.const$3.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle packetsSent$VH() {
      return constants$24.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint32 packetsSent;
     * }
     */
    public static int packetsSent$get(MemorySegment seg) {
      return (int) constants$24.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint32 packetsSent;
     * }
     */
    public static void packetsSent$set(MemorySegment seg, int x) {
      constants$24.const$4.set(seg, x);
    }
    public static int packetsSent$get(MemorySegment seg, long index) {
      return (int) constants$24.const$4.get(seg.asSlice(index * sizeof()));
    }
    public static void packetsSent$set(MemorySegment seg, long index, int x) {
      constants$24.const$4.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle packetsLost$VH() {
      return constants$24.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint32 packetsLost;
     * }
     */
    public static int packetsLost$get(MemorySegment seg) {
      return (int) constants$24.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint32 packetsLost;
     * }
     */
    public static void packetsLost$set(MemorySegment seg, int x) {
      constants$24.const$5.set(seg, x);
    }
    public static int packetsLost$get(MemorySegment seg, long index) {
      return (int) constants$24.const$5.get(seg.asSlice(index * sizeof()));
    }
    public static void packetsLost$set(MemorySegment seg, long index, int x) {
      constants$24.const$5.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle packetLoss$VH() {
      return constants$25.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint32 packetLoss;
     * }
     */
    public static int packetLoss$get(MemorySegment seg) {
      return (int) constants$25.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint32 packetLoss;
     * }
     */
    public static void packetLoss$set(MemorySegment seg, int x) {
      constants$25.const$0.set(seg, x);
    }
    public static int packetLoss$get(MemorySegment seg, long index) {
      return (int) constants$25.const$0.get(seg.asSlice(index * sizeof()));
    }
    public static void packetLoss$set(MemorySegment seg, long index, int x) {
      constants$25.const$0.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle packetLossVariance$VH() {
      return constants$25.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint32 packetLossVariance;
     * }
     */
    public static int packetLossVariance$get(MemorySegment seg) {
      return (int) constants$25.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint32 packetLossVariance;
     * }
     */
    public static void packetLossVariance$set(MemorySegment seg, int x) {
      constants$25.const$1.set(seg, x);
    }
    public static int packetLossVariance$get(MemorySegment seg, long index) {
      return (int) constants$25.const$1.get(seg.asSlice(index * sizeof()));
    }
    public static void packetLossVariance$set(MemorySegment seg, long index, int x) {
      constants$25.const$1.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle packetThrottle$VH() {
      return constants$25.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint32 packetThrottle;
     * }
     */
    public static int packetThrottle$get(MemorySegment seg) {
      return (int) constants$25.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint32 packetThrottle;
     * }
     */
    public static void packetThrottle$set(MemorySegment seg, int x) {
      constants$25.const$2.set(seg, x);
    }
    public static int packetThrottle$get(MemorySegment seg, long index) {
      return (int) constants$25.const$2.get(seg.asSlice(index * sizeof()));
    }
    public static void packetThrottle$set(MemorySegment seg, long index, int x) {
      constants$25.const$2.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle packetThrottleLimit$VH() {
      return constants$25.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint32 packetThrottleLimit;
     * }
     */
    public static int packetThrottleLimit$get(MemorySegment seg) {
      return (int) constants$25.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint32 packetThrottleLimit;
     * }
     */
    public static void packetThrottleLimit$set(MemorySegment seg, int x) {
      constants$25.const$3.set(seg, x);
    }
    public static int packetThrottleLimit$get(MemorySegment seg, long index) {
      return (int) constants$25.const$3.get(seg.asSlice(index * sizeof()));
    }
    public static void packetThrottleLimit$set(MemorySegment seg, long index, int x) {
      constants$25.const$3.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle packetThrottleCounter$VH() {
      return constants$25.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint32 packetThrottleCounter;
     * }
     */
    public static int packetThrottleCounter$get(MemorySegment seg) {
      return (int) constants$25.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint32 packetThrottleCounter;
     * }
     */
    public static void packetThrottleCounter$set(MemorySegment seg, int x) {
      constants$25.const$4.set(seg, x);
    }
    public static int packetThrottleCounter$get(MemorySegment seg, long index) {
      return (int) constants$25.const$4.get(seg.asSlice(index * sizeof()));
    }
    public static void packetThrottleCounter$set(MemorySegment seg, long index, int x) {
      constants$25.const$4.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle packetThrottleEpoch$VH() {
      return constants$25.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint32 packetThrottleEpoch;
     * }
     */
    public static int packetThrottleEpoch$get(MemorySegment seg) {
      return (int) constants$25.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint32 packetThrottleEpoch;
     * }
     */
    public static void packetThrottleEpoch$set(MemorySegment seg, int x) {
      constants$25.const$5.set(seg, x);
    }
    public static int packetThrottleEpoch$get(MemorySegment seg, long index) {
      return (int) constants$25.const$5.get(seg.asSlice(index * sizeof()));
    }
    public static void packetThrottleEpoch$set(MemorySegment seg, long index, int x) {
      constants$25.const$5.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle packetThrottleAcceleration$VH() {
      return constants$26.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint32 packetThrottleAcceleration;
     * }
     */
    public static int packetThrottleAcceleration$get(MemorySegment seg) {
      return (int) constants$26.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint32 packetThrottleAcceleration;
     * }
     */
    public static void packetThrottleAcceleration$set(MemorySegment seg, int x) {
      constants$26.const$0.set(seg, x);
    }
    public static int packetThrottleAcceleration$get(MemorySegment seg, long index) {
      return (int) constants$26.const$0.get(seg.asSlice(index * sizeof()));
    }
    public static void packetThrottleAcceleration$set(MemorySegment seg, long index, int x) {
      constants$26.const$0.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle packetThrottleDeceleration$VH() {
      return constants$26.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint32 packetThrottleDeceleration;
     * }
     */
    public static int packetThrottleDeceleration$get(MemorySegment seg) {
      return (int) constants$26.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint32 packetThrottleDeceleration;
     * }
     */
    public static void packetThrottleDeceleration$set(MemorySegment seg, int x) {
      constants$26.const$1.set(seg, x);
    }
    public static int packetThrottleDeceleration$get(MemorySegment seg, long index) {
      return (int) constants$26.const$1.get(seg.asSlice(index * sizeof()));
    }
    public static void packetThrottleDeceleration$set(MemorySegment seg, long index, int x) {
      constants$26.const$1.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle packetThrottleInterval$VH() {
      return constants$26.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint32 packetThrottleInterval;
     * }
     */
    public static int packetThrottleInterval$get(MemorySegment seg) {
      return (int) constants$26.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint32 packetThrottleInterval;
     * }
     */
    public static void packetThrottleInterval$set(MemorySegment seg, int x) {
      constants$26.const$2.set(seg, x);
    }
    public static int packetThrottleInterval$get(MemorySegment seg, long index) {
      return (int) constants$26.const$2.get(seg.asSlice(index * sizeof()));
    }
    public static void packetThrottleInterval$set(MemorySegment seg, long index, int x) {
      constants$26.const$2.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle pingInterval$VH() {
      return constants$26.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint32 pingInterval;
     * }
     */
    public static int pingInterval$get(MemorySegment seg) {
      return (int) constants$26.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint32 pingInterval;
     * }
     */
    public static void pingInterval$set(MemorySegment seg, int x) {
      constants$26.const$3.set(seg, x);
    }
    public static int pingInterval$get(MemorySegment seg, long index) {
      return (int) constants$26.const$3.get(seg.asSlice(index * sizeof()));
    }
    public static void pingInterval$set(MemorySegment seg, long index, int x) {
      constants$26.const$3.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle timeoutLimit$VH() {
      return constants$26.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint32 timeoutLimit;
     * }
     */
    public static int timeoutLimit$get(MemorySegment seg) {
      return (int) constants$26.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint32 timeoutLimit;
     * }
     */
    public static void timeoutLimit$set(MemorySegment seg, int x) {
      constants$26.const$4.set(seg, x);
    }
    public static int timeoutLimit$get(MemorySegment seg, long index) {
      return (int) constants$26.const$4.get(seg.asSlice(index * sizeof()));
    }
    public static void timeoutLimit$set(MemorySegment seg, long index, int x) {
      constants$26.const$4.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle timeoutMinimum$VH() {
      return constants$26.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint32 timeoutMinimum;
     * }
     */
    public static int timeoutMinimum$get(MemorySegment seg) {
      return (int) constants$26.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint32 timeoutMinimum;
     * }
     */
    public static void timeoutMinimum$set(MemorySegment seg, int x) {
      constants$26.const$5.set(seg, x);
    }
    public static int timeoutMinimum$get(MemorySegment seg, long index) {
      return (int) constants$26.const$5.get(seg.asSlice(index * sizeof()));
    }
    public static void timeoutMinimum$set(MemorySegment seg, long index, int x) {
      constants$26.const$5.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle timeoutMaximum$VH() {
      return constants$27.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint32 timeoutMaximum;
     * }
     */
    public static int timeoutMaximum$get(MemorySegment seg) {
      return (int) constants$27.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint32 timeoutMaximum;
     * }
     */
    public static void timeoutMaximum$set(MemorySegment seg, int x) {
      constants$27.const$0.set(seg, x);
    }
    public static int timeoutMaximum$get(MemorySegment seg, long index) {
      return (int) constants$27.const$0.get(seg.asSlice(index * sizeof()));
    }
    public static void timeoutMaximum$set(MemorySegment seg, long index, int x) {
      constants$27.const$0.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle lastRoundTripTime$VH() {
      return constants$27.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint32 lastRoundTripTime;
     * }
     */
    public static int lastRoundTripTime$get(MemorySegment seg) {
      return (int) constants$27.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint32 lastRoundTripTime;
     * }
     */
    public static void lastRoundTripTime$set(MemorySegment seg, int x) {
      constants$27.const$1.set(seg, x);
    }
    public static int lastRoundTripTime$get(MemorySegment seg, long index) {
      return (int) constants$27.const$1.get(seg.asSlice(index * sizeof()));
    }
    public static void lastRoundTripTime$set(MemorySegment seg, long index, int x) {
      constants$27.const$1.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle lowestRoundTripTime$VH() {
      return constants$27.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint32 lowestRoundTripTime;
     * }
     */
    public static int lowestRoundTripTime$get(MemorySegment seg) {
      return (int) constants$27.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint32 lowestRoundTripTime;
     * }
     */
    public static void lowestRoundTripTime$set(MemorySegment seg, int x) {
      constants$27.const$2.set(seg, x);
    }
    public static int lowestRoundTripTime$get(MemorySegment seg, long index) {
      return (int) constants$27.const$2.get(seg.asSlice(index * sizeof()));
    }
    public static void lowestRoundTripTime$set(MemorySegment seg, long index, int x) {
      constants$27.const$2.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle lastRoundTripTimeVariance$VH() {
      return constants$27.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint32 lastRoundTripTimeVariance;
     * }
     */
    public static int lastRoundTripTimeVariance$get(MemorySegment seg) {
      return (int) constants$27.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint32 lastRoundTripTimeVariance;
     * }
     */
    public static void lastRoundTripTimeVariance$set(MemorySegment seg, int x) {
      constants$27.const$3.set(seg, x);
    }
    public static int lastRoundTripTimeVariance$get(MemorySegment seg, long index) {
      return (int) constants$27.const$3.get(seg.asSlice(index * sizeof()));
    }
    public static void lastRoundTripTimeVariance$set(MemorySegment seg, long index, int x) {
      constants$27.const$3.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle highestRoundTripTimeVariance$VH() {
      return constants$27.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint32 highestRoundTripTimeVariance;
     * }
     */
    public static int highestRoundTripTimeVariance$get(MemorySegment seg) {
      return (int) constants$27.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint32 highestRoundTripTimeVariance;
     * }
     */
    public static void highestRoundTripTimeVariance$set(MemorySegment seg, int x) {
      constants$27.const$4.set(seg, x);
    }
    public static int highestRoundTripTimeVariance$get(MemorySegment seg, long index) {
      return (int) constants$27.const$4.get(seg.asSlice(index * sizeof()));
    }
    public static void highestRoundTripTimeVariance$set(MemorySegment seg, long index, int x) {
      constants$27.const$4.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle roundTripTime$VH() {
      return constants$27.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint32 roundTripTime;
     * }
     */
    public static int roundTripTime$get(MemorySegment seg) {
      return (int) constants$27.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint32 roundTripTime;
     * }
     */
    public static void roundTripTime$set(MemorySegment seg, int x) {
      constants$27.const$5.set(seg, x);
    }
    public static int roundTripTime$get(MemorySegment seg, long index) {
      return (int) constants$27.const$5.get(seg.asSlice(index * sizeof()));
    }
    public static void roundTripTime$set(MemorySegment seg, long index, int x) {
      constants$27.const$5.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle roundTripTimeVariance$VH() {
      return constants$28.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint32 roundTripTimeVariance;
     * }
     */
    public static int roundTripTimeVariance$get(MemorySegment seg) {
      return (int) constants$28.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint32 roundTripTimeVariance;
     * }
     */
    public static void roundTripTimeVariance$set(MemorySegment seg, int x) {
      constants$28.const$0.set(seg, x);
    }
    public static int roundTripTimeVariance$get(MemorySegment seg, long index) {
      return (int) constants$28.const$0.get(seg.asSlice(index * sizeof()));
    }
    public static void roundTripTimeVariance$set(MemorySegment seg, long index, int x) {
      constants$28.const$0.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle mtu$VH() {
      return constants$28.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint32 mtu;
     * }
     */
    public static int mtu$get(MemorySegment seg) {
      return (int) constants$28.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint32 mtu;
     * }
     */
    public static void mtu$set(MemorySegment seg, int x) {
      constants$28.const$1.set(seg, x);
    }
    public static int mtu$get(MemorySegment seg, long index) {
      return (int) constants$28.const$1.get(seg.asSlice(index * sizeof()));
    }
    public static void mtu$set(MemorySegment seg, long index, int x) {
      constants$28.const$1.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle windowSize$VH() {
      return constants$28.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint32 windowSize;
     * }
     */
    public static int windowSize$get(MemorySegment seg) {
      return (int) constants$28.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint32 windowSize;
     * }
     */
    public static void windowSize$set(MemorySegment seg, int x) {
      constants$28.const$2.set(seg, x);
    }
    public static int windowSize$get(MemorySegment seg, long index) {
      return (int) constants$28.const$2.get(seg.asSlice(index * sizeof()));
    }
    public static void windowSize$set(MemorySegment seg, long index, int x) {
      constants$28.const$2.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle reliableDataInTransit$VH() {
      return constants$28.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint32 reliableDataInTransit;
     * }
     */
    public static int reliableDataInTransit$get(MemorySegment seg) {
      return (int) constants$28.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint32 reliableDataInTransit;
     * }
     */
    public static void reliableDataInTransit$set(MemorySegment seg, int x) {
      constants$28.const$3.set(seg, x);
    }
    public static int reliableDataInTransit$get(MemorySegment seg, long index) {
      return (int) constants$28.const$3.get(seg.asSlice(index * sizeof()));
    }
    public static void reliableDataInTransit$set(MemorySegment seg, long index, int x) {
      constants$28.const$3.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle outgoingReliableSequenceNumber$VH() {
      return constants$28.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint16 outgoingReliableSequenceNumber;
     * }
     */
    public static short outgoingReliableSequenceNumber$get(MemorySegment seg) {
      return (short) constants$28.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint16 outgoingReliableSequenceNumber;
     * }
     */
    public static void outgoingReliableSequenceNumber$set(MemorySegment seg, short x) {
      constants$28.const$4.set(seg, x);
    }
    public static short outgoingReliableSequenceNumber$get(MemorySegment seg, long index) {
      return (short) constants$28.const$4.get(seg.asSlice(index * sizeof()));
    }
    public static void outgoingReliableSequenceNumber$set(MemorySegment seg, long index, short x) {
      constants$28.const$4.set(seg.asSlice(index * sizeof()), x);
    }
    public static MemorySegment acknowledgements$slice(MemorySegment seg) {
        return seg.asSlice(224, 16);
    }
    public static MemorySegment sentReliableCommands$slice(MemorySegment seg) {
        return seg.asSlice(240, 16);
    }
    public static MemorySegment sentUnreliableCommands$slice(MemorySegment seg) {
        return seg.asSlice(256, 16);
    }
    public static MemorySegment outgoingCommands$slice(MemorySegment seg) {
        return seg.asSlice(272, 16);
    }
    public static MemorySegment dispatchedCommands$slice(MemorySegment seg) {
        return seg.asSlice(288, 16);
    }
    public static VarHandle flags$VH() {
      return constants$28.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint16 flags;
     * }
     */
    public static short flags$get(MemorySegment seg) {
      return (short) constants$28.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint16 flags;
     * }
     */
    public static void flags$set(MemorySegment seg, short x) {
      constants$28.const$5.set(seg, x);
    }
    public static short flags$get(MemorySegment seg, long index) {
      return (short) constants$28.const$5.get(seg.asSlice(index * sizeof()));
    }
    public static void flags$set(MemorySegment seg, long index, short x) {
      constants$28.const$5.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle reserved$VH() {
      return constants$29.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint16 reserved;
     * }
     */
    public static short reserved$get(MemorySegment seg) {
      return (short) constants$29.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint16 reserved;
     * }
     */
    public static void reserved$set(MemorySegment seg, short x) {
      constants$29.const$0.set(seg, x);
    }
    public static short reserved$get(MemorySegment seg, long index) {
      return (short) constants$29.const$0.get(seg.asSlice(index * sizeof()));
    }
    public static void reserved$set(MemorySegment seg, long index, short x) {
      constants$29.const$0.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle incomingUnsequencedGroup$VH() {
      return constants$29.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint16 incomingUnsequencedGroup;
     * }
     */
    public static short incomingUnsequencedGroup$get(MemorySegment seg) {
      return (short) constants$29.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint16 incomingUnsequencedGroup;
     * }
     */
    public static void incomingUnsequencedGroup$set(MemorySegment seg, short x) {
      constants$29.const$1.set(seg, x);
    }
    public static short incomingUnsequencedGroup$get(MemorySegment seg, long index) {
      return (short) constants$29.const$1.get(seg.asSlice(index * sizeof()));
    }
    public static void incomingUnsequencedGroup$set(MemorySegment seg, long index, short x) {
      constants$29.const$1.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle outgoingUnsequencedGroup$VH() {
      return constants$29.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint16 outgoingUnsequencedGroup;
     * }
     */
    public static short outgoingUnsequencedGroup$get(MemorySegment seg) {
      return (short) constants$29.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint16 outgoingUnsequencedGroup;
     * }
     */
    public static void outgoingUnsequencedGroup$set(MemorySegment seg, short x) {
      constants$29.const$2.set(seg, x);
    }
    public static short outgoingUnsequencedGroup$get(MemorySegment seg, long index) {
      return (short) constants$29.const$2.get(seg.asSlice(index * sizeof()));
    }
    public static void outgoingUnsequencedGroup$set(MemorySegment seg, long index, short x) {
      constants$29.const$2.set(seg.asSlice(index * sizeof()), x);
    }
    public static MemorySegment unsequencedWindow$slice(MemorySegment seg) {
        return seg.asSlice(312, 128);
    }
    public static VarHandle eventData$VH() {
      return constants$29.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint32 eventData;
     * }
     */
    public static int eventData$get(MemorySegment seg) {
      return (int) constants$29.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint32 eventData;
     * }
     */
    public static void eventData$set(MemorySegment seg, int x) {
      constants$29.const$3.set(seg, x);
    }
    public static int eventData$get(MemorySegment seg, long index) {
      return (int) constants$29.const$3.get(seg.asSlice(index * sizeof()));
    }
    public static void eventData$set(MemorySegment seg, long index, int x) {
      constants$29.const$3.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle totalWaitingData$VH() {
      return constants$29.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * size_t totalWaitingData;
     * }
     */
    public static long totalWaitingData$get(MemorySegment seg) {
      return (long) constants$29.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * size_t totalWaitingData;
     * }
     */
    public static void totalWaitingData$set(MemorySegment seg, long x) {
      constants$29.const$4.set(seg, x);
    }
    public static long totalWaitingData$get(MemorySegment seg, long index) {
      return (long) constants$29.const$4.get(seg.asSlice(index * sizeof()));
    }
    public static void totalWaitingData$set(MemorySegment seg, long index, long x) {
      constants$29.const$4.set(seg.asSlice(index * sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


