// Generated by jextract

package com.juanmuscaria.foreign.enet;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;

/**
 * {@snippet :
 * struct _ENetProtocolSendFragment {
 *     ENetProtocolCommandHeader header;
 *     enet_uint16 startSequenceNumber;
 *     enet_uint16 dataLength;
 *     enet_uint32 fragmentCount;
 *     enet_uint32 fragmentNumber;
 *     enet_uint32 totalLength;
 *     enet_uint32 fragmentOffset;
 * };
 * }
 */
public class _ENetProtocolSendFragment {

    public static MemoryLayout $LAYOUT() {
      return constants$9.const$1;
    }
    public static MemorySegment header$slice(MemorySegment seg) {
        return seg.asSlice(0, 4);
    }
    public static VarHandle startSequenceNumber$VH() {
      return constants$9.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint16 startSequenceNumber;
     * }
     */
    public static short startSequenceNumber$get(MemorySegment seg) {
      return (short) constants$9.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint16 startSequenceNumber;
     * }
     */
    public static void startSequenceNumber$set(MemorySegment seg, short x) {
      constants$9.const$2.set(seg, x);
    }
    public static short startSequenceNumber$get(MemorySegment seg, long index) {
      return (short) constants$9.const$2.get(seg.asSlice(index * sizeof()));
    }
    public static void startSequenceNumber$set(MemorySegment seg, long index, short x) {
      constants$9.const$2.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle dataLength$VH() {
      return constants$9.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint16 dataLength;
     * }
     */
    public static short dataLength$get(MemorySegment seg) {
      return (short) constants$9.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint16 dataLength;
     * }
     */
    public static void dataLength$set(MemorySegment seg, short x) {
      constants$9.const$3.set(seg, x);
    }
    public static short dataLength$get(MemorySegment seg, long index) {
      return (short) constants$9.const$3.get(seg.asSlice(index * sizeof()));
    }
    public static void dataLength$set(MemorySegment seg, long index, short x) {
      constants$9.const$3.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle fragmentCount$VH() {
      return constants$9.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint32 fragmentCount;
     * }
     */
    public static int fragmentCount$get(MemorySegment seg) {
      return (int) constants$9.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint32 fragmentCount;
     * }
     */
    public static void fragmentCount$set(MemorySegment seg, int x) {
      constants$9.const$4.set(seg, x);
    }
    public static int fragmentCount$get(MemorySegment seg, long index) {
      return (int) constants$9.const$4.get(seg.asSlice(index * sizeof()));
    }
    public static void fragmentCount$set(MemorySegment seg, long index, int x) {
      constants$9.const$4.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle fragmentNumber$VH() {
      return constants$9.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint32 fragmentNumber;
     * }
     */
    public static int fragmentNumber$get(MemorySegment seg) {
      return (int) constants$9.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint32 fragmentNumber;
     * }
     */
    public static void fragmentNumber$set(MemorySegment seg, int x) {
      constants$9.const$5.set(seg, x);
    }
    public static int fragmentNumber$get(MemorySegment seg, long index) {
      return (int) constants$9.const$5.get(seg.asSlice(index * sizeof()));
    }
    public static void fragmentNumber$set(MemorySegment seg, long index, int x) {
      constants$9.const$5.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle totalLength$VH() {
      return constants$10.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint32 totalLength;
     * }
     */
    public static int totalLength$get(MemorySegment seg) {
      return (int) constants$10.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint32 totalLength;
     * }
     */
    public static void totalLength$set(MemorySegment seg, int x) {
      constants$10.const$0.set(seg, x);
    }
    public static int totalLength$get(MemorySegment seg, long index) {
      return (int) constants$10.const$0.get(seg.asSlice(index * sizeof()));
    }
    public static void totalLength$set(MemorySegment seg, long index, int x) {
      constants$10.const$0.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle fragmentOffset$VH() {
      return constants$10.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint32 fragmentOffset;
     * }
     */
    public static int fragmentOffset$get(MemorySegment seg) {
      return (int) constants$10.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint32 fragmentOffset;
     * }
     */
    public static void fragmentOffset$set(MemorySegment seg, int x) {
      constants$10.const$1.set(seg, x);
    }
    public static int fragmentOffset$get(MemorySegment seg, long index) {
      return (int) constants$10.const$1.get(seg.asSlice(index * sizeof()));
    }
    public static void fragmentOffset$set(MemorySegment seg, long index, int x) {
      constants$10.const$1.set(seg.asSlice(index * sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


