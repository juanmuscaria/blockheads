// Generated by jextract

package com.juanmuscaria.foreign.enet;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;

/**
 * {@snippet :
 * struct _ENetProtocolVerifyConnect {
 *     ENetProtocolCommandHeader header;
 *     enet_uint16 outgoingPeerID;
 *     enet_uint8 incomingSessionID;
 *     enet_uint8 outgoingSessionID;
 *     enet_uint32 mtu;
 *     enet_uint32 windowSize;
 *     enet_uint32 channelCount;
 *     enet_uint32 incomingBandwidth;
 *     enet_uint32 outgoingBandwidth;
 *     enet_uint32 packetThrottleInterval;
 *     enet_uint32 packetThrottleAcceleration;
 *     enet_uint32 packetThrottleDeceleration;
 *     enet_uint32 connectID;
 * };
 * }
 */
public class _ENetProtocolVerifyConnect {

    public static MemoryLayout $LAYOUT() {
      return constants$4.const$0;
    }
    public static MemorySegment header$slice(MemorySegment seg) {
        return seg.asSlice(0, 4);
    }
    public static VarHandle outgoingPeerID$VH() {
      return constants$4.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint16 outgoingPeerID;
     * }
     */
    public static short outgoingPeerID$get(MemorySegment seg) {
      return (short) constants$4.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint16 outgoingPeerID;
     * }
     */
    public static void outgoingPeerID$set(MemorySegment seg, short x) {
      constants$4.const$1.set(seg, x);
    }
    public static short outgoingPeerID$get(MemorySegment seg, long index) {
      return (short) constants$4.const$1.get(seg.asSlice(index * sizeof()));
    }
    public static void outgoingPeerID$set(MemorySegment seg, long index, short x) {
      constants$4.const$1.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle incomingSessionID$VH() {
      return constants$4.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint8 incomingSessionID;
     * }
     */
    public static byte incomingSessionID$get(MemorySegment seg) {
      return (byte) constants$4.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint8 incomingSessionID;
     * }
     */
    public static void incomingSessionID$set(MemorySegment seg, byte x) {
      constants$4.const$2.set(seg, x);
    }
    public static byte incomingSessionID$get(MemorySegment seg, long index) {
      return (byte) constants$4.const$2.get(seg.asSlice(index * sizeof()));
    }
    public static void incomingSessionID$set(MemorySegment seg, long index, byte x) {
      constants$4.const$2.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle outgoingSessionID$VH() {
      return constants$4.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint8 outgoingSessionID;
     * }
     */
    public static byte outgoingSessionID$get(MemorySegment seg) {
      return (byte) constants$4.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint8 outgoingSessionID;
     * }
     */
    public static void outgoingSessionID$set(MemorySegment seg, byte x) {
      constants$4.const$3.set(seg, x);
    }
    public static byte outgoingSessionID$get(MemorySegment seg, long index) {
      return (byte) constants$4.const$3.get(seg.asSlice(index * sizeof()));
    }
    public static void outgoingSessionID$set(MemorySegment seg, long index, byte x) {
      constants$4.const$3.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle mtu$VH() {
      return constants$4.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint32 mtu;
     * }
     */
    public static int mtu$get(MemorySegment seg) {
      return (int) constants$4.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint32 mtu;
     * }
     */
    public static void mtu$set(MemorySegment seg, int x) {
      constants$4.const$4.set(seg, x);
    }
    public static int mtu$get(MemorySegment seg, long index) {
      return (int) constants$4.const$4.get(seg.asSlice(index * sizeof()));
    }
    public static void mtu$set(MemorySegment seg, long index, int x) {
      constants$4.const$4.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle windowSize$VH() {
      return constants$4.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint32 windowSize;
     * }
     */
    public static int windowSize$get(MemorySegment seg) {
      return (int) constants$4.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint32 windowSize;
     * }
     */
    public static void windowSize$set(MemorySegment seg, int x) {
      constants$4.const$5.set(seg, x);
    }
    public static int windowSize$get(MemorySegment seg, long index) {
      return (int) constants$4.const$5.get(seg.asSlice(index * sizeof()));
    }
    public static void windowSize$set(MemorySegment seg, long index, int x) {
      constants$4.const$5.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle channelCount$VH() {
      return constants$5.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint32 channelCount;
     * }
     */
    public static int channelCount$get(MemorySegment seg) {
      return (int) constants$5.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint32 channelCount;
     * }
     */
    public static void channelCount$set(MemorySegment seg, int x) {
      constants$5.const$0.set(seg, x);
    }
    public static int channelCount$get(MemorySegment seg, long index) {
      return (int) constants$5.const$0.get(seg.asSlice(index * sizeof()));
    }
    public static void channelCount$set(MemorySegment seg, long index, int x) {
      constants$5.const$0.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle incomingBandwidth$VH() {
      return constants$5.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint32 incomingBandwidth;
     * }
     */
    public static int incomingBandwidth$get(MemorySegment seg) {
      return (int) constants$5.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint32 incomingBandwidth;
     * }
     */
    public static void incomingBandwidth$set(MemorySegment seg, int x) {
      constants$5.const$1.set(seg, x);
    }
    public static int incomingBandwidth$get(MemorySegment seg, long index) {
      return (int) constants$5.const$1.get(seg.asSlice(index * sizeof()));
    }
    public static void incomingBandwidth$set(MemorySegment seg, long index, int x) {
      constants$5.const$1.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle outgoingBandwidth$VH() {
      return constants$5.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint32 outgoingBandwidth;
     * }
     */
    public static int outgoingBandwidth$get(MemorySegment seg) {
      return (int) constants$5.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint32 outgoingBandwidth;
     * }
     */
    public static void outgoingBandwidth$set(MemorySegment seg, int x) {
      constants$5.const$2.set(seg, x);
    }
    public static int outgoingBandwidth$get(MemorySegment seg, long index) {
      return (int) constants$5.const$2.get(seg.asSlice(index * sizeof()));
    }
    public static void outgoingBandwidth$set(MemorySegment seg, long index, int x) {
      constants$5.const$2.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle packetThrottleInterval$VH() {
      return constants$5.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint32 packetThrottleInterval;
     * }
     */
    public static int packetThrottleInterval$get(MemorySegment seg) {
      return (int) constants$5.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint32 packetThrottleInterval;
     * }
     */
    public static void packetThrottleInterval$set(MemorySegment seg, int x) {
      constants$5.const$3.set(seg, x);
    }
    public static int packetThrottleInterval$get(MemorySegment seg, long index) {
      return (int) constants$5.const$3.get(seg.asSlice(index * sizeof()));
    }
    public static void packetThrottleInterval$set(MemorySegment seg, long index, int x) {
      constants$5.const$3.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle packetThrottleAcceleration$VH() {
      return constants$5.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint32 packetThrottleAcceleration;
     * }
     */
    public static int packetThrottleAcceleration$get(MemorySegment seg) {
      return (int) constants$5.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint32 packetThrottleAcceleration;
     * }
     */
    public static void packetThrottleAcceleration$set(MemorySegment seg, int x) {
      constants$5.const$4.set(seg, x);
    }
    public static int packetThrottleAcceleration$get(MemorySegment seg, long index) {
      return (int) constants$5.const$4.get(seg.asSlice(index * sizeof()));
    }
    public static void packetThrottleAcceleration$set(MemorySegment seg, long index, int x) {
      constants$5.const$4.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle packetThrottleDeceleration$VH() {
      return constants$5.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint32 packetThrottleDeceleration;
     * }
     */
    public static int packetThrottleDeceleration$get(MemorySegment seg) {
      return (int) constants$5.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint32 packetThrottleDeceleration;
     * }
     */
    public static void packetThrottleDeceleration$set(MemorySegment seg, int x) {
      constants$5.const$5.set(seg, x);
    }
    public static int packetThrottleDeceleration$get(MemorySegment seg, long index) {
      return (int) constants$5.const$5.get(seg.asSlice(index * sizeof()));
    }
    public static void packetThrottleDeceleration$set(MemorySegment seg, long index, int x) {
      constants$5.const$5.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle connectID$VH() {
      return constants$6.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint32 connectID;
     * }
     */
    public static int connectID$get(MemorySegment seg) {
      return (int) constants$6.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint32 connectID;
     * }
     */
    public static void connectID$set(MemorySegment seg, int x) {
      constants$6.const$0.set(seg, x);
    }
    public static int connectID$get(MemorySegment seg, long index) {
      return (int) constants$6.const$0.get(seg.asSlice(index * sizeof()));
    }
    public static void connectID$set(MemorySegment seg, long index, int x) {
      constants$6.const$0.set(seg.asSlice(index * sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


