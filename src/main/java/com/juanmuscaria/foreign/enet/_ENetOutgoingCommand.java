// Generated by jextract

package com.juanmuscaria.foreign.enet;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;

/**
 * {@snippet :
 * struct _ENetOutgoingCommand {
 *     ENetListNode outgoingCommandList;
 *     enet_uint16 reliableSequenceNumber;
 *     enet_uint16 unreliableSequenceNumber;
 *     enet_uint32 sentTime;
 *     enet_uint32 roundTripTimeout;
 *     enet_uint32 roundTripTimeoutLimit;
 *     enet_uint32 fragmentOffset;
 *     enet_uint16 fragmentLength;
 *     enet_uint16 sendAttempts;
 *     ENetProtocol command;
 *     ENetPacket* packet;
 * };
 * }
 */
public class _ENetOutgoingCommand {

    public static MemoryLayout $LAYOUT() {
      return constants$17.const$1;
    }
    public static MemorySegment outgoingCommandList$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    public static VarHandle reliableSequenceNumber$VH() {
      return constants$17.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint16 reliableSequenceNumber;
     * }
     */
    public static short reliableSequenceNumber$get(MemorySegment seg) {
      return (short) constants$17.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint16 reliableSequenceNumber;
     * }
     */
    public static void reliableSequenceNumber$set(MemorySegment seg, short x) {
      constants$17.const$2.set(seg, x);
    }
    public static short reliableSequenceNumber$get(MemorySegment seg, long index) {
      return (short) constants$17.const$2.get(seg.asSlice(index * sizeof()));
    }
    public static void reliableSequenceNumber$set(MemorySegment seg, long index, short x) {
      constants$17.const$2.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle unreliableSequenceNumber$VH() {
      return constants$17.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint16 unreliableSequenceNumber;
     * }
     */
    public static short unreliableSequenceNumber$get(MemorySegment seg) {
      return (short) constants$17.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint16 unreliableSequenceNumber;
     * }
     */
    public static void unreliableSequenceNumber$set(MemorySegment seg, short x) {
      constants$17.const$3.set(seg, x);
    }
    public static short unreliableSequenceNumber$get(MemorySegment seg, long index) {
      return (short) constants$17.const$3.get(seg.asSlice(index * sizeof()));
    }
    public static void unreliableSequenceNumber$set(MemorySegment seg, long index, short x) {
      constants$17.const$3.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle sentTime$VH() {
      return constants$17.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint32 sentTime;
     * }
     */
    public static int sentTime$get(MemorySegment seg) {
      return (int) constants$17.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint32 sentTime;
     * }
     */
    public static void sentTime$set(MemorySegment seg, int x) {
      constants$17.const$4.set(seg, x);
    }
    public static int sentTime$get(MemorySegment seg, long index) {
      return (int) constants$17.const$4.get(seg.asSlice(index * sizeof()));
    }
    public static void sentTime$set(MemorySegment seg, long index, int x) {
      constants$17.const$4.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle roundTripTimeout$VH() {
      return constants$17.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint32 roundTripTimeout;
     * }
     */
    public static int roundTripTimeout$get(MemorySegment seg) {
      return (int) constants$17.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint32 roundTripTimeout;
     * }
     */
    public static void roundTripTimeout$set(MemorySegment seg, int x) {
      constants$17.const$5.set(seg, x);
    }
    public static int roundTripTimeout$get(MemorySegment seg, long index) {
      return (int) constants$17.const$5.get(seg.asSlice(index * sizeof()));
    }
    public static void roundTripTimeout$set(MemorySegment seg, long index, int x) {
      constants$17.const$5.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle roundTripTimeoutLimit$VH() {
      return constants$18.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint32 roundTripTimeoutLimit;
     * }
     */
    public static int roundTripTimeoutLimit$get(MemorySegment seg) {
      return (int) constants$18.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint32 roundTripTimeoutLimit;
     * }
     */
    public static void roundTripTimeoutLimit$set(MemorySegment seg, int x) {
      constants$18.const$0.set(seg, x);
    }
    public static int roundTripTimeoutLimit$get(MemorySegment seg, long index) {
      return (int) constants$18.const$0.get(seg.asSlice(index * sizeof()));
    }
    public static void roundTripTimeoutLimit$set(MemorySegment seg, long index, int x) {
      constants$18.const$0.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle fragmentOffset$VH() {
      return constants$18.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint32 fragmentOffset;
     * }
     */
    public static int fragmentOffset$get(MemorySegment seg) {
      return (int) constants$18.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint32 fragmentOffset;
     * }
     */
    public static void fragmentOffset$set(MemorySegment seg, int x) {
      constants$18.const$1.set(seg, x);
    }
    public static int fragmentOffset$get(MemorySegment seg, long index) {
      return (int) constants$18.const$1.get(seg.asSlice(index * sizeof()));
    }
    public static void fragmentOffset$set(MemorySegment seg, long index, int x) {
      constants$18.const$1.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle fragmentLength$VH() {
      return constants$18.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint16 fragmentLength;
     * }
     */
    public static short fragmentLength$get(MemorySegment seg) {
      return (short) constants$18.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint16 fragmentLength;
     * }
     */
    public static void fragmentLength$set(MemorySegment seg, short x) {
      constants$18.const$2.set(seg, x);
    }
    public static short fragmentLength$get(MemorySegment seg, long index) {
      return (short) constants$18.const$2.get(seg.asSlice(index * sizeof()));
    }
    public static void fragmentLength$set(MemorySegment seg, long index, short x) {
      constants$18.const$2.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle sendAttempts$VH() {
      return constants$18.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint16 sendAttempts;
     * }
     */
    public static short sendAttempts$get(MemorySegment seg) {
      return (short) constants$18.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint16 sendAttempts;
     * }
     */
    public static void sendAttempts$set(MemorySegment seg, short x) {
      constants$18.const$3.set(seg, x);
    }
    public static short sendAttempts$get(MemorySegment seg, long index) {
      return (short) constants$18.const$3.get(seg.asSlice(index * sizeof()));
    }
    public static void sendAttempts$set(MemorySegment seg, long index, short x) {
      constants$18.const$3.set(seg.asSlice(index * sizeof()), x);
    }
    public static MemorySegment command$slice(MemorySegment seg) {
        return seg.asSlice(40, 48);
    }
    public static VarHandle packet$VH() {
      return constants$18.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ENetPacket* packet;
     * }
     */
    public static MemorySegment packet$get(MemorySegment seg) {
      return (java.lang.foreign.MemorySegment) constants$18.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ENetPacket* packet;
     * }
     */
    public static void packet$set(MemorySegment seg, MemorySegment x) {
      constants$18.const$4.set(seg, x);
    }
    public static MemorySegment packet$get(MemorySegment seg, long index) {
      return (java.lang.foreign.MemorySegment) constants$18.const$4.get(seg.asSlice(index * sizeof()));
    }
    public static void packet$set(MemorySegment seg, long index, MemorySegment x) {
      constants$18.const$4.set(seg.asSlice(index * sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


