// Generated by jextract

package com.juanmuscaria.foreign.enet;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;

/**
 * {@snippet :
 * struct _ENetHost {
 *     ENetSocket socket;
 *     ENetAddress address;
 *     enet_uint32 incomingBandwidth;
 *     enet_uint32 outgoingBandwidth;
 *     enet_uint32 bandwidthThrottleEpoch;
 *     enet_uint32 mtu;
 *     enet_uint32 randomSeed;
 *     int recalculateBandwidthLimits;
 *     ENetPeer* peers;
 *     size_t peerCount;
 *     size_t channelLimit;
 *     enet_uint32 serviceTime;
 *     ENetList dispatchQueue;
 *     int continueSending;
 *     size_t packetSize;
 *     enet_uint16 headerFlags;
 *     ENetProtocol commands[32];
 *     size_t commandCount;
 *     ENetBuffer buffers[65];
 *     size_t bufferCount;
 *     ENetChecksumCallback checksum;
 *     ENetCompressor compressor;
 *     enet_uint8  packetData[2][4096];
 *     ENetAddress receivedAddress;
 *     enet_uint8* receivedData;
 *     size_t receivedDataLength;
 *     enet_uint32 totalSentData;
 *     enet_uint32 totalSentPackets;
 *     enet_uint32 totalReceivedData;
 *     enet_uint32 totalReceivedPackets;
 *     ENetInterceptCallback intercept;
 *     size_t connectedPeers;
 *     size_t bandwidthLimitedPeers;
 *     size_t duplicatePeers;
 *     size_t maximumPacketSize;
 *     size_t maximumWaitingData;
 * };
 * }
 */
public class _ENetHost {

    public static MemoryLayout $LAYOUT() {
      return constants$32.const$5;
    }
    public static VarHandle socket$VH() {
      return constants$33.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ENetSocket socket;
     * }
     */
    public static int socket$get(MemorySegment seg) {
      return (int) constants$33.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ENetSocket socket;
     * }
     */
    public static void socket$set(MemorySegment seg, int x) {
      constants$33.const$0.set(seg, x);
    }
    public static int socket$get(MemorySegment seg, long index) {
      return (int) constants$33.const$0.get(seg.asSlice(index * sizeof()));
    }
    public static void socket$set(MemorySegment seg, long index, int x) {
      constants$33.const$0.set(seg.asSlice(index * sizeof()), x);
    }
    public static MemorySegment address$slice(MemorySegment seg) {
        return seg.asSlice(4, 8);
    }
    public static VarHandle incomingBandwidth$VH() {
      return constants$33.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint32 incomingBandwidth;
     * }
     */
    public static int incomingBandwidth$get(MemorySegment seg) {
      return (int) constants$33.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint32 incomingBandwidth;
     * }
     */
    public static void incomingBandwidth$set(MemorySegment seg, int x) {
      constants$33.const$1.set(seg, x);
    }
    public static int incomingBandwidth$get(MemorySegment seg, long index) {
      return (int) constants$33.const$1.get(seg.asSlice(index * sizeof()));
    }
    public static void incomingBandwidth$set(MemorySegment seg, long index, int x) {
      constants$33.const$1.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle outgoingBandwidth$VH() {
      return constants$33.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint32 outgoingBandwidth;
     * }
     */
    public static int outgoingBandwidth$get(MemorySegment seg) {
      return (int) constants$33.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint32 outgoingBandwidth;
     * }
     */
    public static void outgoingBandwidth$set(MemorySegment seg, int x) {
      constants$33.const$2.set(seg, x);
    }
    public static int outgoingBandwidth$get(MemorySegment seg, long index) {
      return (int) constants$33.const$2.get(seg.asSlice(index * sizeof()));
    }
    public static void outgoingBandwidth$set(MemorySegment seg, long index, int x) {
      constants$33.const$2.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle bandwidthThrottleEpoch$VH() {
      return constants$33.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint32 bandwidthThrottleEpoch;
     * }
     */
    public static int bandwidthThrottleEpoch$get(MemorySegment seg) {
      return (int) constants$33.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint32 bandwidthThrottleEpoch;
     * }
     */
    public static void bandwidthThrottleEpoch$set(MemorySegment seg, int x) {
      constants$33.const$3.set(seg, x);
    }
    public static int bandwidthThrottleEpoch$get(MemorySegment seg, long index) {
      return (int) constants$33.const$3.get(seg.asSlice(index * sizeof()));
    }
    public static void bandwidthThrottleEpoch$set(MemorySegment seg, long index, int x) {
      constants$33.const$3.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle mtu$VH() {
      return constants$33.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint32 mtu;
     * }
     */
    public static int mtu$get(MemorySegment seg) {
      return (int) constants$33.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint32 mtu;
     * }
     */
    public static void mtu$set(MemorySegment seg, int x) {
      constants$33.const$4.set(seg, x);
    }
    public static int mtu$get(MemorySegment seg, long index) {
      return (int) constants$33.const$4.get(seg.asSlice(index * sizeof()));
    }
    public static void mtu$set(MemorySegment seg, long index, int x) {
      constants$33.const$4.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle randomSeed$VH() {
      return constants$33.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint32 randomSeed;
     * }
     */
    public static int randomSeed$get(MemorySegment seg) {
      return (int) constants$33.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint32 randomSeed;
     * }
     */
    public static void randomSeed$set(MemorySegment seg, int x) {
      constants$33.const$5.set(seg, x);
    }
    public static int randomSeed$get(MemorySegment seg, long index) {
      return (int) constants$33.const$5.get(seg.asSlice(index * sizeof()));
    }
    public static void randomSeed$set(MemorySegment seg, long index, int x) {
      constants$33.const$5.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle recalculateBandwidthLimits$VH() {
      return constants$34.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int recalculateBandwidthLimits;
     * }
     */
    public static int recalculateBandwidthLimits$get(MemorySegment seg) {
      return (int) constants$34.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int recalculateBandwidthLimits;
     * }
     */
    public static void recalculateBandwidthLimits$set(MemorySegment seg, int x) {
      constants$34.const$0.set(seg, x);
    }
    public static int recalculateBandwidthLimits$get(MemorySegment seg, long index) {
      return (int) constants$34.const$0.get(seg.asSlice(index * sizeof()));
    }
    public static void recalculateBandwidthLimits$set(MemorySegment seg, long index, int x) {
      constants$34.const$0.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle peers$VH() {
      return constants$34.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ENetPeer* peers;
     * }
     */
    public static MemorySegment peers$get(MemorySegment seg) {
      return (java.lang.foreign.MemorySegment) constants$34.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ENetPeer* peers;
     * }
     */
    public static void peers$set(MemorySegment seg, MemorySegment x) {
      constants$34.const$1.set(seg, x);
    }
    public static MemorySegment peers$get(MemorySegment seg, long index) {
      return (java.lang.foreign.MemorySegment) constants$34.const$1.get(seg.asSlice(index * sizeof()));
    }
    public static void peers$set(MemorySegment seg, long index, MemorySegment x) {
      constants$34.const$1.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle peerCount$VH() {
      return constants$34.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * size_t peerCount;
     * }
     */
    public static long peerCount$get(MemorySegment seg) {
      return (long) constants$34.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * size_t peerCount;
     * }
     */
    public static void peerCount$set(MemorySegment seg, long x) {
      constants$34.const$2.set(seg, x);
    }
    public static long peerCount$get(MemorySegment seg, long index) {
      return (long) constants$34.const$2.get(seg.asSlice(index * sizeof()));
    }
    public static void peerCount$set(MemorySegment seg, long index, long x) {
      constants$34.const$2.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle channelLimit$VH() {
      return constants$34.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * size_t channelLimit;
     * }
     */
    public static long channelLimit$get(MemorySegment seg) {
      return (long) constants$34.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * size_t channelLimit;
     * }
     */
    public static void channelLimit$set(MemorySegment seg, long x) {
      constants$34.const$3.set(seg, x);
    }
    public static long channelLimit$get(MemorySegment seg, long index) {
      return (long) constants$34.const$3.get(seg.asSlice(index * sizeof()));
    }
    public static void channelLimit$set(MemorySegment seg, long index, long x) {
      constants$34.const$3.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle serviceTime$VH() {
      return constants$34.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint32 serviceTime;
     * }
     */
    public static int serviceTime$get(MemorySegment seg) {
      return (int) constants$34.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint32 serviceTime;
     * }
     */
    public static void serviceTime$set(MemorySegment seg, int x) {
      constants$34.const$4.set(seg, x);
    }
    public static int serviceTime$get(MemorySegment seg, long index) {
      return (int) constants$34.const$4.get(seg.asSlice(index * sizeof()));
    }
    public static void serviceTime$set(MemorySegment seg, long index, int x) {
      constants$34.const$4.set(seg.asSlice(index * sizeof()), x);
    }
    public static MemorySegment dispatchQueue$slice(MemorySegment seg) {
        return seg.asSlice(72, 16);
    }
    public static VarHandle continueSending$VH() {
      return constants$34.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int continueSending;
     * }
     */
    public static int continueSending$get(MemorySegment seg) {
      return (int) constants$34.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int continueSending;
     * }
     */
    public static void continueSending$set(MemorySegment seg, int x) {
      constants$34.const$5.set(seg, x);
    }
    public static int continueSending$get(MemorySegment seg, long index) {
      return (int) constants$34.const$5.get(seg.asSlice(index * sizeof()));
    }
    public static void continueSending$set(MemorySegment seg, long index, int x) {
      constants$34.const$5.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle packetSize$VH() {
      return constants$35.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * size_t packetSize;
     * }
     */
    public static long packetSize$get(MemorySegment seg) {
      return (long) constants$35.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * size_t packetSize;
     * }
     */
    public static void packetSize$set(MemorySegment seg, long x) {
      constants$35.const$0.set(seg, x);
    }
    public static long packetSize$get(MemorySegment seg, long index) {
      return (long) constants$35.const$0.get(seg.asSlice(index * sizeof()));
    }
    public static void packetSize$set(MemorySegment seg, long index, long x) {
      constants$35.const$0.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle headerFlags$VH() {
      return constants$35.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint16 headerFlags;
     * }
     */
    public static short headerFlags$get(MemorySegment seg) {
      return (short) constants$35.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint16 headerFlags;
     * }
     */
    public static void headerFlags$set(MemorySegment seg, short x) {
      constants$35.const$1.set(seg, x);
    }
    public static short headerFlags$get(MemorySegment seg, long index) {
      return (short) constants$35.const$1.get(seg.asSlice(index * sizeof()));
    }
    public static void headerFlags$set(MemorySegment seg, long index, short x) {
      constants$35.const$1.set(seg.asSlice(index * sizeof()), x);
    }
    public static MemorySegment commands$slice(MemorySegment seg) {
        return seg.asSlice(106, 1536);
    }
    public static VarHandle commandCount$VH() {
      return constants$35.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * size_t commandCount;
     * }
     */
    public static long commandCount$get(MemorySegment seg) {
      return (long) constants$35.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * size_t commandCount;
     * }
     */
    public static void commandCount$set(MemorySegment seg, long x) {
      constants$35.const$2.set(seg, x);
    }
    public static long commandCount$get(MemorySegment seg, long index) {
      return (long) constants$35.const$2.get(seg.asSlice(index * sizeof()));
    }
    public static void commandCount$set(MemorySegment seg, long index, long x) {
      constants$35.const$2.set(seg.asSlice(index * sizeof()), x);
    }
    public static MemorySegment buffers$slice(MemorySegment seg) {
        return seg.asSlice(1656, 1040);
    }
    public static VarHandle bufferCount$VH() {
      return constants$35.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * size_t bufferCount;
     * }
     */
    public static long bufferCount$get(MemorySegment seg) {
      return (long) constants$35.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * size_t bufferCount;
     * }
     */
    public static void bufferCount$set(MemorySegment seg, long x) {
      constants$35.const$3.set(seg, x);
    }
    public static long bufferCount$get(MemorySegment seg, long index) {
      return (long) constants$35.const$3.get(seg.asSlice(index * sizeof()));
    }
    public static void bufferCount$set(MemorySegment seg, long index, long x) {
      constants$35.const$3.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle checksum$VH() {
      return constants$35.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ENetChecksumCallback checksum;
     * }
     */
    public static MemorySegment checksum$get(MemorySegment seg) {
      return (java.lang.foreign.MemorySegment) constants$35.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ENetChecksumCallback checksum;
     * }
     */
    public static void checksum$set(MemorySegment seg, MemorySegment x) {
      constants$35.const$4.set(seg, x);
    }
    public static MemorySegment checksum$get(MemorySegment seg, long index) {
      return (java.lang.foreign.MemorySegment) constants$35.const$4.get(seg.asSlice(index * sizeof()));
    }
    public static void checksum$set(MemorySegment seg, long index, MemorySegment x) {
      constants$35.const$4.set(seg.asSlice(index * sizeof()), x);
    }
    public static ENetChecksumCallback checksum(MemorySegment segment, Arena scope) {
        return ENetChecksumCallback.ofAddress(checksum$get(segment), scope);
    }
    public static MemorySegment compressor$slice(MemorySegment seg) {
        return seg.asSlice(2712, 32);
    }
    public static MemorySegment packetData$slice(MemorySegment seg) {
        return seg.asSlice(2744, 8192);
    }
    public static MemorySegment receivedAddress$slice(MemorySegment seg) {
        return seg.asSlice(10936, 8);
    }
    public static VarHandle receivedData$VH() {
      return constants$35.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint8* receivedData;
     * }
     */
    public static MemorySegment receivedData$get(MemorySegment seg) {
      return (java.lang.foreign.MemorySegment) constants$35.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint8* receivedData;
     * }
     */
    public static void receivedData$set(MemorySegment seg, MemorySegment x) {
      constants$35.const$5.set(seg, x);
    }
    public static MemorySegment receivedData$get(MemorySegment seg, long index) {
      return (java.lang.foreign.MemorySegment) constants$35.const$5.get(seg.asSlice(index * sizeof()));
    }
    public static void receivedData$set(MemorySegment seg, long index, MemorySegment x) {
      constants$35.const$5.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle receivedDataLength$VH() {
      return constants$36.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * size_t receivedDataLength;
     * }
     */
    public static long receivedDataLength$get(MemorySegment seg) {
      return (long) constants$36.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * size_t receivedDataLength;
     * }
     */
    public static void receivedDataLength$set(MemorySegment seg, long x) {
      constants$36.const$0.set(seg, x);
    }
    public static long receivedDataLength$get(MemorySegment seg, long index) {
      return (long) constants$36.const$0.get(seg.asSlice(index * sizeof()));
    }
    public static void receivedDataLength$set(MemorySegment seg, long index, long x) {
      constants$36.const$0.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle totalSentData$VH() {
      return constants$36.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint32 totalSentData;
     * }
     */
    public static int totalSentData$get(MemorySegment seg) {
      return (int) constants$36.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint32 totalSentData;
     * }
     */
    public static void totalSentData$set(MemorySegment seg, int x) {
      constants$36.const$1.set(seg, x);
    }
    public static int totalSentData$get(MemorySegment seg, long index) {
      return (int) constants$36.const$1.get(seg.asSlice(index * sizeof()));
    }
    public static void totalSentData$set(MemorySegment seg, long index, int x) {
      constants$36.const$1.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle totalSentPackets$VH() {
      return constants$36.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint32 totalSentPackets;
     * }
     */
    public static int totalSentPackets$get(MemorySegment seg) {
      return (int) constants$36.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint32 totalSentPackets;
     * }
     */
    public static void totalSentPackets$set(MemorySegment seg, int x) {
      constants$36.const$2.set(seg, x);
    }
    public static int totalSentPackets$get(MemorySegment seg, long index) {
      return (int) constants$36.const$2.get(seg.asSlice(index * sizeof()));
    }
    public static void totalSentPackets$set(MemorySegment seg, long index, int x) {
      constants$36.const$2.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle totalReceivedData$VH() {
      return constants$36.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint32 totalReceivedData;
     * }
     */
    public static int totalReceivedData$get(MemorySegment seg) {
      return (int) constants$36.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint32 totalReceivedData;
     * }
     */
    public static void totalReceivedData$set(MemorySegment seg, int x) {
      constants$36.const$3.set(seg, x);
    }
    public static int totalReceivedData$get(MemorySegment seg, long index) {
      return (int) constants$36.const$3.get(seg.asSlice(index * sizeof()));
    }
    public static void totalReceivedData$set(MemorySegment seg, long index, int x) {
      constants$36.const$3.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle totalReceivedPackets$VH() {
      return constants$36.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enet_uint32 totalReceivedPackets;
     * }
     */
    public static int totalReceivedPackets$get(MemorySegment seg) {
      return (int) constants$36.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enet_uint32 totalReceivedPackets;
     * }
     */
    public static void totalReceivedPackets$set(MemorySegment seg, int x) {
      constants$36.const$4.set(seg, x);
    }
    public static int totalReceivedPackets$get(MemorySegment seg, long index) {
      return (int) constants$36.const$4.get(seg.asSlice(index * sizeof()));
    }
    public static void totalReceivedPackets$set(MemorySegment seg, long index, int x) {
      constants$36.const$4.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle intercept$VH() {
      return constants$36.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ENetInterceptCallback intercept;
     * }
     */
    public static MemorySegment intercept$get(MemorySegment seg) {
      return (java.lang.foreign.MemorySegment) constants$36.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ENetInterceptCallback intercept;
     * }
     */
    public static void intercept$set(MemorySegment seg, MemorySegment x) {
      constants$36.const$5.set(seg, x);
    }
    public static MemorySegment intercept$get(MemorySegment seg, long index) {
      return (java.lang.foreign.MemorySegment) constants$36.const$5.get(seg.asSlice(index * sizeof()));
    }
    public static void intercept$set(MemorySegment seg, long index, MemorySegment x) {
      constants$36.const$5.set(seg.asSlice(index * sizeof()), x);
    }
    public static ENetInterceptCallback intercept(MemorySegment segment, Arena scope) {
        return ENetInterceptCallback.ofAddress(intercept$get(segment), scope);
    }
    public static VarHandle connectedPeers$VH() {
      return constants$37.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * size_t connectedPeers;
     * }
     */
    public static long connectedPeers$get(MemorySegment seg) {
      return (long) constants$37.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * size_t connectedPeers;
     * }
     */
    public static void connectedPeers$set(MemorySegment seg, long x) {
      constants$37.const$0.set(seg, x);
    }
    public static long connectedPeers$get(MemorySegment seg, long index) {
      return (long) constants$37.const$0.get(seg.asSlice(index * sizeof()));
    }
    public static void connectedPeers$set(MemorySegment seg, long index, long x) {
      constants$37.const$0.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle bandwidthLimitedPeers$VH() {
      return constants$37.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * size_t bandwidthLimitedPeers;
     * }
     */
    public static long bandwidthLimitedPeers$get(MemorySegment seg) {
      return (long) constants$37.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * size_t bandwidthLimitedPeers;
     * }
     */
    public static void bandwidthLimitedPeers$set(MemorySegment seg, long x) {
      constants$37.const$1.set(seg, x);
    }
    public static long bandwidthLimitedPeers$get(MemorySegment seg, long index) {
      return (long) constants$37.const$1.get(seg.asSlice(index * sizeof()));
    }
    public static void bandwidthLimitedPeers$set(MemorySegment seg, long index, long x) {
      constants$37.const$1.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle duplicatePeers$VH() {
      return constants$37.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * size_t duplicatePeers;
     * }
     */
    public static long duplicatePeers$get(MemorySegment seg) {
      return (long) constants$37.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * size_t duplicatePeers;
     * }
     */
    public static void duplicatePeers$set(MemorySegment seg, long x) {
      constants$37.const$2.set(seg, x);
    }
    public static long duplicatePeers$get(MemorySegment seg, long index) {
      return (long) constants$37.const$2.get(seg.asSlice(index * sizeof()));
    }
    public static void duplicatePeers$set(MemorySegment seg, long index, long x) {
      constants$37.const$2.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle maximumPacketSize$VH() {
      return constants$37.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * size_t maximumPacketSize;
     * }
     */
    public static long maximumPacketSize$get(MemorySegment seg) {
      return (long) constants$37.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * size_t maximumPacketSize;
     * }
     */
    public static void maximumPacketSize$set(MemorySegment seg, long x) {
      constants$37.const$3.set(seg, x);
    }
    public static long maximumPacketSize$get(MemorySegment seg, long index) {
      return (long) constants$37.const$3.get(seg.asSlice(index * sizeof()));
    }
    public static void maximumPacketSize$set(MemorySegment seg, long index, long x) {
      constants$37.const$3.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle maximumWaitingData$VH() {
      return constants$37.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * size_t maximumWaitingData;
     * }
     */
    public static long maximumWaitingData$get(MemorySegment seg) {
      return (long) constants$37.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * size_t maximumWaitingData;
     * }
     */
    public static void maximumWaitingData$set(MemorySegment seg, long x) {
      constants$37.const$4.set(seg, x);
    }
    public static long maximumWaitingData$get(MemorySegment seg, long index) {
      return (long) constants$37.const$4.get(seg.asSlice(index * sizeof()));
    }
    public static void maximumWaitingData$set(MemorySegment seg, long index, long x) {
      constants$37.const$4.set(seg.asSlice(index * sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


