plugins {
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.1.0'
}

group 'com.juanmuscaria'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven { url 'https://www.jitpack.io' }
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(21))
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {
    annotationProcessor 'org.projectlombok:lombok:1.18.30'

    implementation 'com.google.guava:guava:31.1-jre'
    implementation 'org.lmdbjava:lmdbjava:0.8.3'
    implementation 'it.unimi.dsi:fastutil:8.5.12'
    implementation 'io.github.mkpaz:atlantafx-base:2.0.1'
    implementation 'com.github.PavelKastornyy.ansi4j:ansi4j-core-impl:ansi4j-1.1.0'
    implementation 'com.github.PavelKastornyy.ansi4j:ansi4j-core-api:ansi4j-1.1.0'
    implementation 'com.github.PavelKastornyy.ansi4j:ansi4j-css-impl:ansi4j-1.1.0'
    implementation 'com.github.PavelKastornyy.ansi4j:ansi4j-css-api:ansi4j-1.1.0'
    implementation 'org.fxmisc.richtext:richtextfx:0.11.2'
    implementation 'info.picocli:picocli:4.7.5'
    implementation 'org.fusesource.jansi:jansi:2.4.1'
    implementation 'net.datafaker:datafaker:2.0.2'

    // Logging
    implementation 'org.slf4j:slf4j-api:2.0.9'
    implementation 'ch.qos.logback:logback-classic:1.4.14'

    // Be able to decode objective c stuff
    implementation 'com.googlecode.plist:dd-plist:1.27'

    // http stuff
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'com.github.monkeywie:proxyee:1.7.6'

    // Todo: remove in favor of Foreign Memory/Function API
    implementation 'net.java.dev.jna:jna:5.14.0'

    // Testing stuff I'll never use because who tests codes?
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

javafx {
    version = '17'
    modules = ['javafx.controls', 'javafx.fxml']
    configurations = ['implementation', 'testImplementation']
}


test {
    useJUnitPlatform()
}

application {
    mainClass = 'com.juanmuscaria.blockheads.intercept.BHInterceptor'
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += ['--enable-preview']
}

tasks.withType(JavaExec).configureEach {
    jvmArgs += '--enable-preview'
    jvmArgs += '--enable-native-access=ALL-UNNAMED'
    jvmArgs += '--add-opens=java.base/java.nio=ALL-UNNAMED,'
    jvmArgs += '-Djansi.mode=force'
    jvmArgs += '-Dpicocli.ansi=true'
}

[
        ["Interceptor", "com.juanmuscaria.blockheads.intercept.BHInterceptor"],
        ["InterceptorGui", "com.juanmuscaria.blockheads.intercept.BHInterceptorApplication"],
        ["WorldInspector", "com.juanmuscaria.blockheads.intercept.WorldInspector"],
].each { taskConfig ->
    tasks.register("run${taskConfig[0]}",) {
        group = "application"
        finalizedBy "run"
        doFirst {
            run.mainClass = "${taskConfig[1]}"
            if (args) {
                run.argsString(args as String)
            }
        }
    }
}